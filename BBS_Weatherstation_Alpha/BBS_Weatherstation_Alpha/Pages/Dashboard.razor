@using BBS_Weatherstation_SeriesA.Data.Global
@using BBS_Weatherstation_SeriesA.Data.Models
@using BBS_Weatherstation_SeriesA.Data.Repositories
@using Radzen.Blazor
@page "/dashboard"

<MudGrid>
    <MudItem xs="12" >
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudSelect @bind-Value="dataQuery.measurement" T="string" Label="Daten" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@placeholder" />
                @foreach(string measurement in Storage.Measurements)
                {
                    <MudSelectItem Disabled="true" Value="@measurement" />
                }
            </MudSelect>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" >
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                <MudButton OnClick=@(() => dataQuery.timespan = timespan.today )>Heute</MudButton>
                <MudButton OnClick=@(() => dataQuery.timespan = timespan.yesterday )>Gestern</MudButton>
                <MudButton OnClick=@(() => dataQuery.timespan = timespan.lastweek )>1 Woche</MudButton>
                <MudButton OnClick=@(() => dataQuery.timespan = timespan.lastmonth )>1 Monat</MudButton>
                <MudButton OnClick=@(() => dataQuery.timespan = timespan.lastyear )>1 Jahr</MudButton>
                <MudButton>Alle</MudButton>
            </MudButtonGroup>
            <MudSpacer />
            <MudSwitch UnCheckedColor="Color.Error" Color="Color.Default" Label="Debug" @bind-Checked="@_debug" />
        </MudPaper>
    </MudItem>
    <MudHidden Invert="@_debug">
        <MudItem xs="12" sm="12">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                <MudText Typo="Typo.h6">Debug</MudText>
                <label></label>
            </MudPaper>
        </MudItem>
    </MudHidden>

    @foreach (Storage.DataList item in clientStorage)
    {    
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <div class="col-sm-12 my-5"> 
                <RadzenChart @ref="radzenChart">
                    <RadzenLineSeries Data="@item.dataObjects.ToArray()" ValueProperty="value" CategoryProperty="timestamp" Title="@item.topic" >
                        <RadzenMarkers MarkerType="MarkerType.Square" />
                    </RadzenLineSeries>
                </RadzenChart>
            </div>
        </MudPaper>
    </MudItem>
    }
</MudGrid>

@code {
    RadzenChart radzenChart = new();
    DataQuery dataQuery = new();

    List<Storage.DataList> serverStorage = Storage.Data;
    List<Storage.DataList> clientStorage = Storage.Data;
    static string placeholder = "all";

    private bool _debug { get; set; } = true;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

		//clientStorage = ClientStorageRepo.Get(dataQuery, serverStorage).dataObjects;
        radzenChart.Reload();
    }

}



